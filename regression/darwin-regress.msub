#!/bin/bash -l
##---------------------------------------------------------------------------##
## File  : regression/darwin-regression.sh
## Date  : Tuesday, May 31, 2016, 14:48 pm
## Author: Kelly Thompson
## Note  : Copyright (C) 2016, Triad National Security, LLC.
##         All rights are reserved.
##---------------------------------------------------------------------------##

# Allow variable as case condition
shopt -s extglob

#----------------------------------------------------------------------#
# The script starts here
#----------------------------------------------------------------------#

# Sanity Check
# ----------------------------------------
if [[ ! ${rscriptdir} ]]; then
   echo "Fatal Error, rscriptdir not found in environment."
   exit 1
fi

# import some bash functions
source $rscriptdir/scripts/common.sh


# Sanity Check
# ----------------------------------------
if [[ ! ${subproj} ]]; then
   echo "Fatal Error, subproj not found in environment."
   exit 1
fi
if [[ ! ${regdir} ]]; then
   echo "Fatal Error, regdir not found in environment."
   exit 1
fi
if [[ ! ${build_type} ]]; then
   echo "Fatal Error, build_type not found in environment."
   exit 1
fi
if [[ ! ${logdir} ]]; then
   echo "Fatal Error, logdir not found in environment."
   exit 1
fi
if [[ ! ${scratchdir} ]]; then
   echo "Fatal Error, scratchdir not found in environment."
   exit 1
fi

# Environment setup
# ----------------------------------------
umask 0002

export http_proxy=http://proxyout.lanl.gov:8080
export HTTP_PROXY=$http_proxy
export https_proxy=$http_proxy
export HTTPS_PROXY=$http_proxy
# ctest submit seems to ignore these no proxy settings, so we must unset the
# above proxy env variables before submitting the results to cdash.
export no_proxy="localhost,127.0.0.1,rtt.lanl.gov,.lanl.gov"
export NO_PROXY=$no_proxy
export VENDOR_DIR=/usr/projects/draco/vendors
# gitlab.lanl.gov has an unkown certificate, disable checking
export GIT_SSL_NO_VERIFY=true

case $REGRESSION_PHASE in
cbt) ctestparts=Configure,Build,Test;;
s)
  ctestparts=Submit
  # Submitting to CDash requires this
  unset http_proxy
  unset https_proxy
  unset HTTP_PROXY
  unset HTTPS_PROXY
  ;;
  *)
    echo "Fatal Error, REGRESSION_PHASE = \"${REGRESSION_PHASE}\" does not match \"c\", \"b\", \"t\" or \"s\"."
    exit 1
    ;;
esac

# Host based variables
# ----------------------------------------
machine=`uname -n`
export host=`uname -n | sed -e 's/[.].*//g'`
platform_extra_params=`echo $platform_extra_params | sed -e 's/ / | /g'`
source $rscriptdir/darwin-options.sh

# Header
# ----------------------------------------
echo "==========================================================================="
echo "${machine_name_long} regression: ${ctestparts} from ${machine}."
echo "                      ${subproj}-${build_type}${epdash}${extra_params_sort_safe}${prdash}${featurebranch}"
echo "==========================================================================="
if [[ ${SLURM_JOB_PARTITION} ]]; then
  echo " "
  echo "Allocation configuration:"
  echo $SLURM_JOB_PARTITION
  echo " "
fi
run "ulimit -a"

# Modules
# ----------------------------------------
# This section is (more or less) copied from draco/environment/bash/.bashrc_darwin.
export DRACO_ARCH=`/usr/projects/draco/vendors/bin/target_arch`

# Use modules found in the draco directory
run "module use --append ${VENDOR_DIR}/user_contrib"
run "module use --append ${VENDOR_DIR}-ec/Modules/$DRACO_ARCH"
run "module purge"
run "module load user_contrib"

# Clear any default loaded modules as these are invalid when staring a new shell.
echo -e "\nLoading modules for architecture type $DRACO_ARCH. \n"

case $DRACO_ARCH in
  arm)
    cflavor="gcc-8.2.0"
    mflavor="$cflavor-openmpi-3.1.2"
    noflavor="git cmake gcc/8.2.0"
    compflavor="gsl/2.5-$cflavor netlib-lapack/3.8.0-$cflavor numdiff/5.9.0-$cflavor random123/1.09-$cflavor metis/5.1.0-$cflavor eospac/6.3.1-$cflavor openmpi/3.1.2-gcc_8.2.0"
    mpiflavor="parmetis/4.0.3-$mflavor superlu-dist/5.2.2-$mflavor-netlib trilinos/12.12.1-$mflavor-netlib"
    # ec_mf="ndi"
    # work around for known openmpi issues: https://rtt.lanl.gov/redmine/issues/1229
    # eliminates warnings: "there are more than one active ports on host"
    export OMPI_MCA_btl=^openib
    export UCX_NET_DEVICES=mlx5_0:1
    # The modules on darwin seem to set things incorrect.  Attempt to fix here:
    export LANG=en_US
    export TERM=xterm-256color
    export CC="$CC -mcpu=thunderx2t99"
    export CXX="$CXX -mcpu=thunderx2t99"
    export FC="$FC -mcpu=thunderx2t99"
    # CPP, F77, and F90 already have the '-mcpu' option.
    ;;

  x86_64)
    cflavor="gcc-7.3.0"
    mflavor="$cflavor-openmpi-3.1.2"
    noflavor="emacs git cmake/3.14.0-$cflavor gcc/7.3.0 ack"
    compflavor="gsl/2.5-$cflavor netlib-lapack/3.8.0-$cflavor numdiff/5.9.0-$cflavor random123/1.09-$cflavor metis/5.1.0-$cflavor eospac/6.3.1-$cflavor openmpi/3.1.2-gcc_7.3.0"
    mpiflavor="parmetis/4.0.3-$mflavor superlu-dist/5.2.2-$mflavor-netlib trilinos/12.12.1-$mflavor-netlib"
    ec_mf="ndi"
    if [[ ${SLURM_JOB_PARTITION} == "volta-x86" ]]; then
      # If we have GPUs on this node, then load the cuda toolkit module by default
      compflavor+=" cuda/9.2"
    fi
    # Add clang-format (version 6) to the default environment.
    if [[ -x /projects/opt/centos7/clang/6.0.0/bin/clang-format ]]; then
      export PATH=$PATH:/projects/opt/centos7/clang/6.0.0/bin
    fi
    # work around for known openmpi issues: https://rtt.lanl.gov/redmine/issues/1229
    # eliminates warnings: "there are more than one active ports on host"
    export OMPI_MCA_btl=^openib
    export UCX_NET_DEVICES=mlx5_0:1
    ;;
  knl)
    cflavor="gcc-7.1.0"
    mflavor="$cflavor-openmpi-2.1.0"
    noflavor="git random123 cmake"
    compflavor="gcc/7.1.0 gsl/2.4-$cflavor metis/5.1.0-$cflavor \
numdiff/5.9.0"
    mpiflavor="openmpi/2.1.0-gcc_7.1.0 parmetis/4.0.3-$mflavor \
superlu-dist/5.2.2-$mflavor trilinos/12.12.1-$mflavor"
    ec_mf="ndi eospac/6.3.0"
    ;;
  power9*)
    cflavor="gcc-7.3.0"
    mflavor="$cflavor-openmpi-3.1.2"
    noflavor="git cmake gcc/7.3.0"
    compflavor="random123 numdiff gsl/2.5-$cflavor netlib-lapack/3.8.0-$cflavor metis/5.1.0-$cflavor openmpi/p9/3.1.2-gcc_7.3.0"
    mpiflavor="parmetis/4.0.3-$mflavor superlu-dist/5.2.2-${mflavor}-netlib trilinos/12.12.1-${mflavor}-netlib cuda/9.2"
    # These aren't built for power architectures?
    # ec_mf="ndi eospac/6.3.0"
    # work around for known openmpi issues: https://rtt.lanl.gov/redmine/issues/1229
    # eliminates warnings: "there are more than one active ports on host"
    export OMPI_MCA_btl=^openib
    export UCX_NET_DEVICES=mlx5_0:1
    export UCX_WARN_UNUSED_ENV_VARS=n
    ;;
esac
export dracomodules="$noflavor $compflavor $mpiflavor $ec_mf"
run "module load $dracomodules"
export CXX=`which g++`
export CC=`which gcc`
export FC=`which gfortran`
export MPIEXEC_EXECUTABLE=`which mpirun`

# http://stackoverflow.com/questions/11959906/openmp-and-numa-relation
export OMP_NUM_THREADS=`lscpu | grep "per socket" | awk '{print $4}'`
export OMP_PROC_BIND=true
comp=${CXX##*/}

case $extra_params in
  "")
  # no-op
  ;;
  arm)
  # no-op
  ;;
  gpu-volta)
  # no-op
  ;;
  knl)
  # no-op
  ;;
  perfbench)
  # no-op
  ;;
  power9)
  # no-op
  ;;
  vtest)
  # no-op
  ;;
  @($pem_match) )
    # found in tt-options.sh but no rule found here
    echo "FATAL ERROR"
    echo "Extra parameter = ${ep} requested and known by ${machine_name_short}-options.sh,"
    echo "but ${0##*/} doesn't know about this option."
    exit 1
    ;;
  *)
    echo "FATAL ERROR"
    echo "Extra parameter = ${extra_param} requested but is unknown to"
    echo "the regression system."
    exit 1
    ;;
esac
run "module list"
unset MPI_ROOT

# Use a unique regression folder for each github branch
if [[ $extra_params_sort_safe ]]; then
  comp=$comp-$extra_params_sort_safe
fi
comp=$comp-$featurebranch

# When run by crontab, use a special ssh-key to allow authentication to gitlab
# https://www.funtoo.org/Subarches
if [[ ${regress_mode} == "on" ]]; then
  run "module load git"
  keychain=keychain-2.8.2
  $VENDOR_DIR/$keychain/keychain $HOME/.ssh/regress_rsa
  if test -f $HOME/.keychain/$machine-sh; then
    run "source $HOME/.keychain/$machine-sh"
  else
    echo "Error: could not find $HOME/.keychain/$machine-sh"
  fi
fi

# ----------------------------------------
# Run the CTest script:
# ----------------------------------------
# This script will take the following build steps:
# 1. cvs update
# 2. run cmake to build Makefiles
# 3. run make to build libraries and tests
# 4. Run the unit tests
# 5. Post the results to rtt.lanl.gov/cdash
#
# Options are:
# Regression type: Experimental (default), Nightly, Continuous
# Build type     : Release, Debug

if [[ ! ${dashboard_type} ]]; then
   dashboard_type=Experimental
fi
if [[ ! ${base_dir} ]]; then
   if ! [[ -d ${scratchdir} ]]; then
      echo "FATAL ERROR, scratchdir=${scratchdir} not found."
      echo "  Have the names/locations of scratch space changed?"
      exit 1
   fi
   scratchdir=$scratchdir/$LOGNAME/cdash/${machine_name_short}
   base_dir=${regdir}/cdash/${machine_name_short}
fi

echo " "
echo "${0##*/}: dashboard_type = $dashboard_type"
echo "${0##*/}: base_dir       = $base_dir"
echo "${0##*/}: build_type     = $build_type"
echo "${0##*/}: comp           = $comp"
echo "${0##*/}: machine        = $machine"
echo "${0##*/}: subproj        = $subproj"
echo "${0##*/}: regdir         = $regdir"
echo "${0##*/}: extra_params_sort_safe = $extra_params_sort_safe"

#----------------------------------------------------------------------#
# CTest
#----------------------------------------------------------------------#

if test "${subproj}" == draco; then
    script_dir=${rscriptdir}
    script_name=Draco_Linux64.cmake
elif test "${subproj}" == jayenne; then
    script_dir=`echo ${rscriptdir} | sed -e 's/draco/jayenne/'`
    script_name=Jayenne_Linux64.cmake
elif test "${subproj}" == core; then
    script_dir=`echo ${rscriptdir} | sed -e 's%draco/regression%core/scripts%'`
    script_name=Core_Linux64.cmake
elif test "${subproj}" == trt; then
    script_dir=`echo ${rscriptdir} | sed -e 's%draco/regression%trt/scripts%'`
    script_name=Trt_Linux64.cmake
elif test "${subproj}" == npt; then
    script_dir=`echo ${rscriptdir} | sed -e 's%draco/regression%npt/scripts%'`
    script_name=Npt_Linux64.cmake
fi

if test "${regress_mode}" = "off"; then
    export buildname_append="-${USER}"
fi

# work_dir and scratchdir are not the same for regress_mode == on.
export work_dir=${base_dir}/${subproj}/${dashboard_type}_${comp}/${build_type}
export scratch_dir=${scratchdir}/${subproj}/${dashboard_type}_${comp}/${build_type}

echo "${0##*/}: work_dir       = ${work_dir}"
echo "${0##*/}: scratch_dir    = ${scratch_dir}"
echo " "

setup_dirs=`echo $ctestparts | grep Configure`
if [[ ${setup_dirs} ]]; then
   if ! test -d ${work_dir}/source; then
      run "mkdir -p ${work_dir}/source"
   fi
   # See notes above where scratch_dir is set concerning why these are soft
   # links.
   if test "${regress_mode}" = "on"; then
     if ! test -d ${scratch_dir}/build; then
       run "mkdir -p ${scratch_dir}/build"
     fi
     # remove symlinks
     rm ${work_dir}/build ${work_dir}/target
     if ! test -d ${work_dir}/build; then
       run "ln -s ${scratch_dir}/build ${work_dir}/build"
     fi
     if ! test -d ${scratch_dir}/target; then
       run "mkdir -p ${scratch_dir}/target"
     fi
     if ! test -d ${work_dir}/target; then
       run "ln -s ${scratch_dir}/target ${work_dir}/target"
     fi
   else
     # $work_dir is $scratchdir/$USER/cdash/$machine/$build_name
     if ! test -d ${work_dir}/build; then
       run "mkdir -p ${work_dir}/build"
     fi
     if ! test -d ${work_dir}/target; then
       run "mkdir -p ${work_dir}/target"
     fi
   fi

   # clean the installation directory to remove any files that might no longer
   # be generated.
   if test -d ${work_dir}/target/lib; then
       run "rm -rf ${work_dir}/target/*"
   fi
   if test -f ${work_dir}/build/CMakeCache.txt; then
       run "rm -rf ${work_dir}/build/*"
   fi
fi

# Environment
# echo " "
# echo "--------------------(environment)------------------------------"
# set
# echo "--------------------(end environment)--------------------------"

date

# echo " "
# echo "Proxy Settings:"
# printenv | grep -i proxy

echo " "
echo ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}
echo " "
ctest -VV -S ${script_dir}/${script_name},${dashboard_type},${build_type},${ctestparts}

if [[ ${regress_mode} == "on" ]]; then
  echo " "
  run "chgrp -R ccsrad ${work_dir}"
  run "chmod -R g+rwX,o-rwX ${work_dir}"
#  run "find ${work_dir} -type d -exec chmod g+s {} \;"
fi

echo "All done."

##---------------------------------------------------------------------------##
## End of script
##---------------------------------------------------------------------------##
