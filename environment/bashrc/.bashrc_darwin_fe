##-*- Mode: sh -*-
##---------------------------------------------------------------------------##
## .bashrc_darwin_fe - my bash configuration file upon bash login
##---------------------------------------------------------------------------##

#verbose=true
if test -n "$verbose"; then
  echo "In .bashrc_darwin_fe"
fi

# sfeatures | grep <feature:=knl> <-- look for "idle" (not "down" and not "drain")
# salloc -N 1 -p power8+
# salloc -N 1 -p knl-quad_flat

##---------------------------------------------------------------------------##
## ENVIRONMENTS
##---------------------------------------------------------------------------##

if [[ ! ${VENDOR_DIR} ]]; then
  export VENDOR_DIR=/usr/projects/draco/vendors
  export PATH=$PATH:$VENDOR_DIR/bin
fi

# modules
export DRACO_ARCH=`/usr/projects/draco/vendors/bin/target_arch`

if test -n "$MODULESHOME"; then

    module use --append ${VENDOR_DIR}/user_contrib
    module use --append ${VENDOR_DIR}-ec/Modules/$DRACO_ARCH
    module load user_contrib

    echo -e "\nLoading modules for architecture type $DRACO_ARCH. \n"

    case $DRACO_ARCH in
      arm)
        cflavor="gcc-8.2.0"
        mflavor="$cflavor-openmpi-3.1.2"
        noflavor="git cmake gcc/8.2.0"
        compflavor="gsl/2.5-$cflavor netlib-lapack/3.8.0-$cflavor numdiff/5.9.0-$cflavor random123/1.09-$cflavor metis/5.1.0-$cflavor eospac/6.3.1-$cflavor openmpi/3.1.2-gcc_8.2.0"
        mpiflavor="parmetis/4.0.3-$mflavor superlu-dist/5.2.2-$mflavor-netlib trilinos/12.12.1-$mflavor-netlib"
        # ec_mf="ndi"
        # work around for known openmpi issues: https://rtt.lanl.gov/redmine/issues/1229
        export OMPI_MCA_btl=^openib
        export UCX_NET_DEVICES=mlx5_0:1
      ;;

      x86_64)
        cflavor="gcc-7.3.0"
        mflavor="$cflavor-openmpi-3.1.2"
        noflavor="emacs git cmake gcc/7.3.0 ack"
        compflavor="gsl/2.5-$cflavor netlib-lapack/3.8.0-$cflavor numdiff/5.9.0-$cflavor random123/1.09-$cflavor metis/5.1.0-$cflavor eospac/6.3.1-$cflavor openmpi/3.1.2-gcc_7.3.0"
        mpiflavor="parmetis/4.0.3-$mflavor superlu-dist/5.2.2-$mflavor-netlib trilinos/12.12.1-$mflavor-netlib"
        ec_mf="ndi"
        if [[ ${SLURM_JOB_PARTITION} =~ "volta" ]]; then
          # If we have GPUs on this node, then load the cuda toolkit module by default
          compflavor+=" cuda/9.2"
        fi
        # Add clang-format (version 6) to the default environment.
        if [[ -x /projects/opt/centos7/clang/6.0.0/bin/clang-format ]]; then
          export PATH=$PATH:/projects/opt/centos7/clang/6.0.0/bin
        fi
      ;;

      knl)
        cflavor="gcc-7.1.0"
        mflavor="$cflavor-openmpi-2.1.0"
        noflavor="git random123 cmake"
        compflavor="gcc/7.1.0 gsl/2.4-$cflavor metis/5.1.0-$cflavor \
numdiff/5.9.0"
        mpiflavor="openmpi/2.1.0-gcc_7.1.0 parmetis/4.0.3-$mflavor \
superlu-dist/5.2.2-$mflavor trilinos/12.12.1-$mflavor"
        ec_mf="ndi eospac/6.3.0"
        ;;
#       power8*)
#         cflavor="gcc-7.1.0"
#         mflavor="$cflavor-openmpi-2.1.0"
#         noflavor="subversion git random123 numdiff/5.9.0 cmake/3.9.4"
#         compflavor="gcc/7.1.0 gsl/2.4-$cflavor metis/5.1.0-$cflavor"
#         mpiflavor="openmpi/2.1.0-gcc_7.1.0 parmetis/4.0.3-$mflavor \
#         superlu-dist/5.2.2-$mflavor trilinos/12.12.1-$mflavor"
#         ;;
      power9*)
        cflavor="gcc-7.3.0"
        mflavor="$cflavor-openmpi-3.1.2"
        noflavor="git cmake gcc/7.3.0"
        compflavor="random123 numdiff gsl/2.5-$cflavor netlib-lapack/3.8.0-$cflavor metis/5.1.0-$cflavor openmpi/p9/3.1.2-gcc_7.3.0"
        mpiflavor="parmetis/4.0.3-$mflavor superlu-dist/5.2.2-${mflavor}-netlib trilinos/12.12.1-${mflavor}-netlib"
        # These aren't built for power architectures?
        # ec_mf="ndi eospac/6.3.0"
        ;;
    esac
    export dracomodules="$noflavor $compflavor $mpiflavor $ec_mf"

  function dracoenv ()
  {
    for m in $dracomodules; do
      module load $m
    done
    export CXX=`which g++`
    export CC=`which gcc`
    export FC=`which gfortran`
    export MPIEXEC_EXECUTABLE=`which mpirun`

    # CMake-3.12+ doesn't want X_ROOT variables
    unset MPI_ROOT

    # Previously, we used Darwin for nightly regressions with Intel-MPI.  When
    # Intel-MPI is selected, these variables must be set:

    #export CXX=`which mpiicpc`
    #export CC=`which mpiicc`
    #export FC=`which mpiifort`

    # only for Intel-MPI
    #echo "mpd --daemon"
    #mpd --daemon
  }

  function rmdracoenv ()
  {
    unset CXX
    unset CC
    unset FC
    unset MPIEXEC_EXECUTABLE
    # unload in reverse order.
    mods=( ${dracomodules} )
    for ((i=${#mods[@]}-1; i>=0; i--)); do
      loaded=`echo $LOADEDMODULES | grep -c ${mods[$i]}`
      if test $loaded = 1; then
        module unload ${mods[$i]}
      fi
    done
  }

fi

# Avoid printing trigraph chars to the screen (eg: ���)
export LANG=en_US

##---------------------------------------------------------------------------##
## end of .bashrc_darwin_fe
##---------------------------------------------------------------------------##
