##-*- Mode: sh -*-
##---------------------------------------------------------------------------##
## .bashrc_ats2 - my bash configuration file upon bash login
##---------------------------------------------------------------------------##

if test -n "$verbose"; then
   echo "In draco/environment/bashrc/.bashrc_ats2"
fi

##---------------------------------------------------------------------------##
## ENVIRONMENTS
##---------------------------------------------------------------------------##

# unlimit stack and core dump sizes.
ulimit -s unlimited

# Where is the vendor directory
if test "${VENDOR_DIR}x" == "x"; then
  if test -d /usr/gapps/jayenne/vendors; then
    export VENDOR_DIR=/usr/gapps/jayenne/vendors
    export PATH=$VENDOR_DIR/bin:$PATH
  fi
fi

#
# MODULES
#

# 1. Determine if the module command is available
modcmd=`declare -f module`
# If not found, look for it in /usr/share/Modules (ML)
if [[ ! ${modcmd} ]]; then
  if test -f /usr/share/lmod/lmod/init/bash; then
    source /usr/share/lmod/lmod/init/bash
  else
    echo "ERROR: The module command was not found. No modules will be loaded."
  fi
fi
modcmd=`declare -f module`

# 2. Use modules found in the draco directory
if [[ ! ${modcmd} ]]; then
  echo "ERROR: The module command was not found. No modules will be loaded."
else

  #module use --append ${VENDOR_DIR}-ec/modulefiles
  module use /usr/gapps/user_contrib/spack.20190314/share/spack/lmod/linux-rhel7-ppc64le/Core
  module unuse /usr/share/lmod/lmod/modulefiles/Core

  export dracomodules="cuda python gcc/7.3.1 spectrum-mpi cmake/3.12.1 git \
gsl numdiff random123 metis netlib-lapack parmetis"

  #if [[ `groups | grep -c ccsrad` != 0 ]]; then
  #  dracomodules="$dracomodules csk ndi"
  #fi

fi

function dracoenv()
{
  module purge
  for m in $dracomodules; do
    module load $m
  done
  export CXX=`which g++`
  export CC=`which gcc`
  export FC=`which gfortran`
  unset MPI_ROOT
}

# Do not escape $ for bash completion
shopt -s direxpand

alias cmakedebug='C_FLAGS=-Werror CXX_FLAGS=-Werror cmake -Wdeprecated -Wdev'
alias cmakerel='cmake -DCMAKE_BUILD_TYPE=RELEASE'

##---------------------------------------------------------------------------##
## end of .bashrc_ats2
##---------------------------------------------------------------------------##
